// The MIT License (MIT)
//
// Copyright (c) 2017 Darrell Wright
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files( the "Software" ), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#define BOOST_TEST_MODULE aes_test

#include <array>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <tuple>

#include <daw/boost_test.h>
#include <daw/daw_algorithm.h>

#include "aes.h"

using namespace daw::crypto;

BOOST_AUTO_TEST_CASE( aes_key_schedule ) {
	using daw::crypto::aes::impl::AES128_KEY_SCHEDULE_SIZE;
	using daw::crypto::aes::impl::AES128_KEY_SIZE;

	constexpr uint8_t const key_0[AES128_KEY_SIZE::value] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	                                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	constexpr uint8_t const key_0_ref[AES128_KEY_SCHEDULE_SIZE::value] = {
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x63,
	    0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x9b, 0x98, 0x98, 0xc9,
	    0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x90, 0x97, 0x34, 0x50, 0x69, 0x6c,
	    0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99, 0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81,
	    0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b, 0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda,
	    0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90, 0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37,
	    0x6a, 0xb4, 0x9b, 0xa7, 0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b,
	    0xf0, 0x9b, 0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f,
	    0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41, 0xb4, 0xef,
	    0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e};

	constexpr uint8_t const key_1[AES128_KEY_SIZE::value] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	                                                         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
	constexpr uint8_t const key_1_ref[AES128_KEY_SCHEDULE_SIZE::value] = {
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xe9,
	    0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 0xad, 0xae, 0xae, 0x19,
	    0xba, 0xb8, 0xb8, 0x0f, 0x52, 0x51, 0x51, 0xe6, 0x45, 0x47, 0x47, 0xf0, 0x09, 0x0e, 0x22, 0x77, 0xb3, 0xb6,
	    0x9a, 0x78, 0xe1, 0xe7, 0xcb, 0x9e, 0xa4, 0xa0, 0x8c, 0x6e, 0xe1, 0x6a, 0xbd, 0x3e, 0x52, 0xdc, 0x27, 0x46,
	    0xb3, 0x3b, 0xec, 0xd8, 0x17, 0x9b, 0x60, 0xb6, 0xe5, 0xba, 0xf3, 0xce, 0xb7, 0x66, 0xd4, 0x88, 0x04, 0x5d,
	    0x38, 0x50, 0x13, 0xc6, 0x58, 0xe6, 0x71, 0xd0, 0x7d, 0xb3, 0xc6, 0xb6, 0xa9, 0x3b, 0xc2, 0xeb, 0x91, 0x6b,
	    0xd1, 0x2d, 0xc9, 0x8d, 0xe9, 0x0d, 0x20, 0x8d, 0x2f, 0xbb, 0x89, 0xb6, 0xed, 0x50, 0x18, 0xdd, 0x3c, 0x7d,
	    0xd1, 0x50, 0x96, 0x33, 0x73, 0x66, 0xb9, 0x88, 0xfa, 0xd0, 0x54, 0xd8, 0xe2, 0x0d, 0x68, 0xa5, 0x33, 0x5d,
	    0x8b, 0xf0, 0x3f, 0x23, 0x32, 0x78, 0xc5, 0xf3, 0x66, 0xa0, 0x27, 0xfe, 0x0e, 0x05, 0x14, 0xa3, 0xd6, 0x0a,
	    0x35, 0x88, 0xe4, 0x72, 0xf0, 0x7b, 0x82, 0xd2, 0xd7, 0x85, 0x8c, 0xd7, 0xc3, 0x26};

	constexpr uint8_t const key_2[AES128_KEY_SIZE::value] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	                                                         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

	constexpr uint8_t const key_2_ref[AES128_KEY_SCHEDULE_SIZE::value] = {
	    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0xd6, 0xaa,
	    0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe, 0xb6, 0x92, 0xcf, 0x0b,
	    0x64, 0x3d, 0xbd, 0xf1, 0xbe, 0x9b, 0xc5, 0x00, 0x68, 0x30, 0xb3, 0xfe, 0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2,
	    0xc9, 0xbf, 0x6c, 0x59, 0x0c, 0xbf, 0x04, 0x69, 0xbf, 0x41, 0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x03,
	    0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x05, 0x8d, 0xfd, 0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb, 0x50, 0xf3,
	    0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa, 0x5e, 0x39, 0x0f, 0x7d, 0xf7, 0xa6, 0x92, 0x96, 0xa7, 0x55, 0x3d, 0xc1,
	    0x0a, 0xa3, 0x1f, 0x6b, 0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c, 0x44, 0x0a, 0xdf, 0x4d, 0x4e, 0xa9,
	    0xc0, 0x26, 0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9, 0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2,
	    0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e, 0x13, 0x11,
	    0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 0xf3, 0x07, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5,
	};

	auto key0_sched = daw::crypto::aes::impl::aes128_key_schedule( daw::make_array_view( key_0 ) );

	BOOST_REQUIRE( daw::algorithm::equal( key_0_ref, daw::next( key_0_ref, AES128_KEY_SCHEDULE_SIZE::value ),
	                                      key0_sched.cbegin( ), key0_sched.cend( ) ) );

	auto key1_sched = daw::crypto::aes::impl::aes128_key_schedule( daw::make_array_view( key_1 ) );

	BOOST_REQUIRE( daw::algorithm::equal( key_1_ref, daw::next( key_1_ref, AES128_KEY_SCHEDULE_SIZE::value ),
	                                      key1_sched.cbegin( ), key1_sched.cend( ) ) );

	auto key2_sched = daw::crypto::aes::impl::aes128_key_schedule( daw::make_array_view( key_2 ) );

	BOOST_REQUIRE( daw::algorithm::equal( key_2_ref, daw::next( key_2_ref, AES128_KEY_SCHEDULE_SIZE::value ),
	                                      key2_sched.cbegin( ), key2_sched.cend( ) ) );
}

BOOST_AUTO_TEST_CASE( aes_sbox_001 ) {
	constexpr uint8_t const message[] = "Hello World 123"; // {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9,
	                                                       // 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a};

	constexpr uint8_t const space1[100] = {0};
	constexpr uint8_t const expected_cipher[] = {0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46,
	                                             0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d};

	constexpr uint8_t const space2[100] = {0};
	constexpr uint8_t const key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
	                                 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};

	auto const cipher_text =
	    daw::crypto::aes::impl::aes_encrypt_128_block( daw::make_array_view( message ), daw::make_array_view( key ) );

	auto const new_message = daw::crypto::aes::impl::aes_decrypt_128_block( daw::make_array_view( cipher_text ),
	                                                                        daw::make_array_view( key ) );

	constexpr auto const new_message2 = daw::crypto::aes::impl::aes_decrypt_128_block(
	    daw::make_array_view( expected_cipher ), daw::make_array_view( key ) );

	bool const are_same1 = daw::algorithm::equal( std::cbegin( expected_cipher ), std::cend( expected_cipher ),
	                                              cipher_text.cbegin( ), cipher_text.cend( ) );

	bool const are_same2 = daw::algorithm::equal( message, message + 16, new_message.cbegin( ), new_message.cend( ) );

	bool const are_same3 = daw::algorithm::equal( message, message + 16, new_message2.cbegin( ), new_message2.cend( ) );

	BOOST_REQUIRE( are_same1 );
	BOOST_REQUIRE( are_same2 );
	BOOST_REQUIRE( are_same3 );
	return;
}
